#!/usr/bin/env python
"""KMS Secrets

Usage:
  kms-secrets (get|put) <file> --region=<region> --bucket=<bucket> [--master-key-arn=<arn>]

Options:
  -h --help               Show this screen
  --region=<region>       AWS Region that S3 buckets and KMS keys can be found in
  --master-key-arn=<arn>  Master Key ARN to use in encryption step
  --bucket=<bucket>       S3 bucket to put files in.
"""
import sys
import boto3
from urlparse import urlparse
from s3_encryption.client import S3EncryptionClient
from docopt import docopt
import logging

FORMAT = '%(asctime)-15s %(levelname)-6s %(message)s'
DATE_FORMAT = '%Y-%m-%dT%H:%M:%S'

logging.basicConfig(format=FORMAT, datefmt=DATE_FORMAT)
logger = logging.getLogger()
logger.setLevel(logging.INFO)

VERSION = '0.1.0'


def upload_to_s3(region, url, blob, encrypt_key=None, ACL='bucket-owner-full-control'):
    url = urlparse(url)
    if encrypt_key is None:
        s3 = boto3.client('s3', region_name=region)
    else:
        s3 = S3EncryptionClient(encryption_key=encrypt_key, region_name=region)

    s3.put_object(Body=blob,
                  Bucket=url.netloc,
                  Key=url.path.lstrip('/'),
                  ACL=ACL)


def download_from_s3(region, url):
    url = urlparse(url)
    s3 = boto3.client('s3', region_name=region)
    resp = s3.get_object(Bucket=url.netloc,
                         Key=url.path.lstrip('/'))
    return resp['Body'].read()


def download_encrypted_from_s3(region, url):
    key_url = '{}.key'.format(url)
    enc_key = download_from_s3(region, key_url)
    key = decrypt_data_key(region, enc_key)

    url = urlparse(url)
    s3 = S3EncryptionClient(encryption_key=key, region_name=region)
    privkey = s3.get_object(Bucket=url.netloc, Key=url.path.lstrip('/'))
    return privkey


def request_data_key(region, master_key_id, key_spec):
    kms = boto3.client('kms', region_name=region)
    data_key = kms.generate_data_key(KeyId=master_key_id,
                                     KeySpec=key_spec)
    logger.info('Generated new key with id: {} and master key id: {}'.format(data_key['KeyId'], master_key_id))
    return data_key['Plaintext'], data_key['CiphertextBlob']


def decrypt_data_key(region, enc_blob):
    kms = boto3.client('kms', region_name=region)
    data_key = kms.decrypt(CiphertextBlob=enc_blob)
    return data_key['Plaintext']


def get_file(fname, bucket, region):
    s3_uri = 's3://{}/{}'.format(bucket, fname)
    print download_encrypted_from_s3(region, s3_uri)

def put_file(fname, arn, bucket, region):
    with open(fname, 'r') as fs:
        data = fs.read()
    pt_key, blob_key = request_data_key(region, arn, 'AES_256')
    s3_uri = 's3://{}/{}'.format(bucket, fname)
    upload_to_s3(region, s3_uri + '.key', blob_key)
    upload_to_s3(region, s3_uri, data, encrypt_key=pt_key)


if __name__ == '__main__':
    args = docopt(__doc__, version='KMS Secrets {}'.format(VERSION))
    if args['get']:
        get_file(args['<file>'], args['--bucket'], args['--region'])
    elif args['put']:
        if args['--master-key-arn'] is None:
            print "'--master-key-arn' must be supplied for PUT operations"
            sys.exit(1)
        put_file(args['<file>'], args['--master-key-arn'], args['--bucket'], args['--region'])
    else:
        print "unknown action!"
